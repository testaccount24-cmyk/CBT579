         PUSH PRINT,noprint
         PRINT OFF,NOPRINT
.*                                                                    *
.* Function:  Implement BREAK and CONTINUE capability for the IBM     *
.*            structured programming macros included in the HLASM     *
.*            toolkit.                                                *
.*                                                                    *
.* Usage:     Add COPY SPMACROS statement to your program prior to    *
.*            the first usage of a structured macro.  If you already  *
.*            have a COPY ASMMSP statement in your source code you    *
.*            will need to remove it (just gets way to complicated    *
.*            to do this support any other way!).                     *
.*                                                                    *
.* Info:      The structured programming macros in the HLASM toolkit  *
.*            are normally included via a COPY ASMMSP statement. If   *
.*            you're including the SPMACROS member then we can assume *
.*            you want the structured macros so we'll go ahead and    *
.*            include them first thing in this macro.                 *
.*                                                                    *
.*            How it works: First we issue the COPY ASMMSP and        *
.*            this brings in all of the structured macro definitions. *
.*            Since we need to "hook" the DO and ENDDO macros to      *
.*            provide the BREAK and CONTINUE functionality, we first  *
.*            do an OPSYN for DO and ENDDO so we can save their       *
.*            real contents.  Then we will define our new versions    *
.*            of DO and ENDDO that wrap the originals' functionality  *
.*            with some setting of global variables that are used     *
.*            in the event a BREAK or CONTINUE statement is coded.    *
.*            The CONTINUE statement needs to branch to a point       *
.*            prior to the instructions generated for the             *
.*            corresponding ENDDO.  Any BREAK statement needs to      *
.*            branch past the ENDDO instructions so we can get        *
.*            out of the loop.  Then it's just a matter of defining   *
.*            the BREAK and CONTINUE macros so they branch to the     *
.*            proper label. (BTW, labels will only be generated when  *
.*            they are required due to usage of either a BREAK or     *
.*            CONTINUE within the bounding DO loop).                  *
.*                                                                    *
.* Examples:                                                          *
.*        DO WHILE=(...)                                              *
.*          ...                                                       *
.*          IF (CLC,...)                                              *
.*            MVC RC,=F'8'                                            *
.*            BREAK             Break out of DO loop                  *
.*          ENDIF                                                     *
.*        ENDDO                                                       *
.*                                                                    *
.*        DO WHILE=(...)                                              *
.*          ...                                                       *
.*          IF (CLC,...)                                              *
.*            CONTINUE          Continue with next iteration of DO    *
.*          ENDIF                                                     *
.*          ...                                                       *
.*        ENDDO                                                       *
.*                                                                    *
.*        You can also break / continue to something other than the   *
.*        adjacent outer DO by explicitly labeling the DO statement   *
.*        and then referencing the label on the BREAK or CONTINUE:    *
.*                                                                    *
.*  L1    DO WHILE=(...)                                              *
.*          ...                                                       *
.*  L2      DO WHILE=(...)                                            *
.*            ...                                                     *
.*            IF (CLC,...)                                            *
.*              MVC RC,=F'8'                                          *
.*              CONTINUE L1       Continue on with L1's loop          *
.*            ENDIF                                                   *
.*          ENDDO                                                     *
.*        ENDDO                                                       *
.*                                                                    *
.* Maintenance History:                                               *
.*                                                                    *
.*   Date   Who Prob #  CHID Description                              *
.* ======== === ======= ==== ======================================== *
.* 06/03/02 TJP P000000 #000 Macro created
.* 06/05/02 TJP P000000 #001 Add support for optional labels on the   *
.*                           DO that can be referenced directly on    *
.*                           the BREAK or CONTINUE.                   *
.*                                                                    *
.* ** End of maintenance history **                                   *
.*                                                                    *
.*--------------------------------------------------------------------*
.*
         COPY  ASMMSP                  IBM's structured pgming macros
##DO     OPSYN DO                      Hide the real "DO" macro
##ENDDO  OPSYN ENDDO                   Hide the real "ENDDO" macro
.*
.**********************************************************************
.* Define our replacement DO macro that will set some global          *
.* variables for branch labels. It will then invoke the original DO   *
.* macro that has been aliased to ##DO.                               *
.**********************************************************************
         MACRO
&LABEL   DO    &P1,&FROM=,&TO=,&BY=,&UNTIL=,&WHILE=
         GBLA  &##DOLVL,##DOCNT
         GBLC  &##DOLOP(100)           Labels for start of loop checks
         GBLC  &##DOEND(100)           Labels for end of loops
         GBLC  &##DOLBL(100)           Labels for DO loop Label
         GBLB  &##DOLOPF(100)          Labels for start of loop needed?
         GBLB  &##DOENDF(100)          Labels for end of loop needed?
.*
&##DOLVL SETA  &##DOLVL+1
&##DOCNT SETA  &##DOCNT+1
.*
&##DOLBL(&##DOLVL) SETC '&LABEL'            Label for DO loop
&##DOLOP(&##DOLVL) SETC '#@DC'.'&##DOCNT'.'L'.'&##DOLVL'  CONT label
&##DOEND(&##DOLVL) SETC '#@DB'.'&##DOCNT'.'L'.'&##DOLVL'  BREAK label

.*---- Invoke the real DO macro at this time
         ##DO  &P1,FROM=&FROM,TO=&TO,BY=&BY,UNTIL=&UNTIL,WHILE=&WHILE

         MEND

.**********************************************************************
.* Define our replacement ENDDO macro.  Generate labels for           *
.* BREAK and CONTINUE statements only if they are needed.  Invoke     *
.* the original ENDDO to generate the branching code.                 *
.**********************************************************************
         MACRO
         ENDDO
         GBLA  &##DOLVL
         GBLC  &##DOLOP(100)           Labels for start of loop checks
         GBLC  &##DOEND(100)           Labels for end of loops
         GBLC  &##DOLBL(100)           Labels for DO loop Label
         GBLB  &##DOLOPF(100)          Labels for start of loop needed?
         GBLB  &##DOENDF(100)          Labels for end of loop needed?
.*
         AIF   (NOT &##DOLOPF(&##DOLVL)).BEF   CONTINUE specified??
&##DOLOP(&##DOLVL) EQU  *              Label for CONTINUE
.BEF     ANOP
.*
.* Invoke the real ENDDO macro at this time
         ##ENDDO
.*
         AIF   (NOT &##DOENDF(&##DOLVL)).END   BREAK specified?
&##DOEND(&##DOLVL) EQU  *              Label for BREAK
.END     ANOP
.*
&##DOLOPF(&##DOLVL) SETB 0             Turn off CONTINUE label req flag
&##DOENDF(&##DOLVL) SETB 0             Turn off BREAK label req flag
&##DOLBL(&##DOLVL)  SETC ''            Reset Label for DO loop
&##DOLVL SETA  &##DOLVL-1              Decrement the DO level count
         MEND

.**********************************************************************
.* Generate the branch to the BREAK statement label.  Set the flag    *
.* so we know we need to generate the statement when the ENDDO is     *
.* encountered.                                                       *
.**********************************************************************
         MACRO
         BREAK &LABEL
         GBLA  &##DOLVL
         GBLC  &##DOLOP(100)           Labels for start of loop checks
         GBLC  &##DOEND(100)           Labels for end of loops
         GBLC  &##DOLBL(100)           Labels for DO loop Label
         GBLB  &##DOENDF(100)          Labels for end of loop needed?
         LCLA  &DOLVL                  What level do we break to?
&DOLVL   SETA  &##DOLVL                Default to current level
.*       If Label Specified with BREAK search for same
.*       If found utilize that Label at that level
         AIF   ('&LABEL' EQ '').DOLVLOK
.BRLOOPA ANOP  ,
         AIF   ('&##DOLBL(&DOLVL)' EQ '&LABEL').DOLVLOK
&DOLVL   SETA  &DOLVL-1
         AIF   (&DOLVL GT 0).BRLOOPA
         MNOTE 8,'The target label selected for the BREAK either does n$
               ot exist or is an inner loop label'
         MEXIT ,
.* Label found, so &DOLVL has been adjusted to the proper value
.DOLVLOK ANOP  ,
.*
         B     &##DOEND(&DOLVL)        Break out of current DO loop!
&##DOENDF(&DOLVL) SETB 1               Turn on BREAK label req
.*
         MEND

.**********************************************************************
.* Generate the branch to the CONTINUE statement label.  Set the flag *
.* so we know we need to generate the statement when the ENDDO is     *
.* encountered.                                                       *
.**********************************************************************
         MACRO
         CONTINUE &LABEL
         GBLA  &##DOLVL
         GBLC  &##DOLOP(100)           Labels for start of loop checks
         GBLC  &##DOLBL(100)           Labels for DO loop Label
         GBLB  &##DOLOPF(100)          Labels for start of loop needed?
.*
         LCLA  &DOLVL                  What level do we CONTINUE at?
&DOLVL   SETA  &##DOLVL                Default to current level
.*       If Label Specified with CONTINUE search for same
.*       If found utilize that Label at that level
         AIF   ('&LABEL' EQ '').DOLVLOK
.BRLOOPA ANOP  ,
         AIF   ('&##DOLBL(&DOLVL)' EQ '&LABEL').DOLVLOK
&DOLVL   SETA  &DOLVL-1
         AIF   (&DOLVL GT 0).BRLOOPA
         MNOTE 8,'The target label selected for the CONTINUE either doe$
               s not exist or is an inner loop label'
         MEXIT ,
.* Label found, so &DOLVL has been adjusted to the proper value
.DOLVLOK ANOP  ,
.*
         B     &##DOLOP(&DOLVL)        Continue on in the DO loop!
&##DOLOPF(&DOLVL) SETB 1               Turn on CONTINUE label req
.*
         MEND
         POP  PRINT,noprint
